// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/acsaba22/go/grpctested/mempb (interfaces: MemServerClient)

// Package mock_mempb is a generated GoMock package.
package mock_mempb

import (
	context "context"
	mempb "github.com/acsaba22/go/grpctested/mempb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMemServerClient is a mock of MemServerClient interface
type MockMemServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockMemServerClientMockRecorder
}

// MockMemServerClientMockRecorder is the mock recorder for MockMemServerClient
type MockMemServerClientMockRecorder struct {
	mock *MockMemServerClient
}

// NewMockMemServerClient creates a new mock instance
func NewMockMemServerClient(ctrl *gomock.Controller) *MockMemServerClient {
	mock := &MockMemServerClient{ctrl: ctrl}
	mock.recorder = &MockMemServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemServerClient) EXPECT() *MockMemServerClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockMemServerClient) Get(arg0 context.Context, arg1 *mempb.GetRequest, arg2 ...grpc.CallOption) (*mempb.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*mempb.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMemServerClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemServerClient)(nil).Get), varargs...)
}
